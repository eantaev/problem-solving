from functools import cmp_to_key


def largest_num_cmp(s0, t0):
    s = s0
    t = t0
    si = 0
    ti = 0
    s_len = len(s)
    t_len = len(t)
    for i in range(s_len + t_len):
        if si == s_len:
            s = t0
            si = 0
            s_len = len(t0)
        if ti == t_len:
            t = s0
            ti = 0
            t_len = len(s0)
        sv = s[si]
        tv = t[ti]
        if sv < tv:
            return -1
        elif sv > tv:
            return 1
        si += 1
        ti += 1

    return 0


def sort_for_largest_num(numbers):
    str_numbers = sorted([str(num) for num in numbers], key=cmp_to_key(largest_num_cmp), reverse=True)
    return str_numbers


def largest_number(numbers):
    str_numbers = sort_for_largest_num(numbers)
    result = ''.join(str_numbers)
    if result[0] == '0':
        return '0'
    return result


assert largest_num_cmp('9', '90') == 1
assert largest_num_cmp('900', '90') == -1
assert largest_num_cmp('354', '35') == 1

assert largest_number([90, 9]) == '990'
assert largest_number([3, 30, 34, 5, 9]) == '9534330'


assert largest_number([ 931, 94, 209, 448, 716, 903, 124, 372, 462, 196, 715, 802, 103, 740, 389, 872, 615, 638, 771, 829, 899, 999, 29, 163, 342, 902, 922, 312, 326, 817, 288, 75, 37, 286, 708, 589, 975, 747, 743, 699, 743, 954, 523, 989, 114, 402, 236, 855, 323, 79, 949, 176, 663, 587, 322 ]) == '9999899759549499493192290390289987285582981780279771757477437437407167157086996636386155895875234624484023893737234232632332231229288286236209196176163124114103'

print(sort_for_largest_num([23, 232]))

print(largest_number([23, 232]))

print(sort_for_largest_num([ 773, 703, 780, 206, 821, 949, 331, 110, 232, 979, 892, 639, 244, 480, 660, 189, 635, 98, 711, 871, 690, 613, 503, 705, 923, 740, 471, 764, 557, 854, 5, 490, 920, 306, 313, 817, 730, 874, 520, 634, 15, 281, 922, 70, 481, 584, 860, 238, 168, 216, 946, 420, 795, 194, 961, 625, 39, 288, 345, 262, 315, 992, 66, 139, 451, 495, 204, 646, 3, 898, 315, 344, 23, 333, 685, 116, 302, 757, 890, 792, 634, 609, 719, 647, 942, 397, 821, 983, 259, 538, 307 ]))

print(largest_number([ 773, 703, 780, 206, 821, 949, 331, 110, 232, 979, 892, 639, 244, 480, 660, 189, 635, 98, 711, 871, 690, 613, 503, 705, 923, 740, 471, 764, 557, 854, 5, 490, 920, 306, 313, 817, 730, 874, 520, 634, 15, 281, 922, 70, 481, 584, 860, 238, 168, 216, 946, 420, 795, 194, 961, 625, 39, 288, 345, 262, 315, 992, 66, 139, 451, 495, 204, 646, 3, 898, 315, 344, 23, 333, 685, 116, 302, 757, 890, 792, 634, 609, 719, 647, 942, 397, 821, 983, 259, 538, 307 ]))

assert largest_number([ 773, 703, 780, 206, 821, 949, 331, 110, 232, 979, 892, 639, 244, 480, 660, 189, 635, 98, 711, 871, 690, 613, 503, 705, 923, 740, 471, 764, 557, 854, 5, 490, 920, 306, 313, 817, 730, 874, 520, 634, 15, 281, 922, 70, 481, 584, 860, 238, 168, 216, 946, 420, 795, 194, 961, 625, 39, 288, 345, 262, 315, 992, 66, 139, 451, 495, 204, 646, 3, 898, 315, 344, 23, 333, 685, 116, 302, 757, 890, 792, 634, 609, 719, 647, 942, 397, 821, 983, 259, 538, 307 ]) == '99298983979961949946942923922920898892890874871860854821821817795792780773764757740730719711707057036906856666064764663963563463462561360958455755385205034954904814804714514203973934534433333313153153133073063022882812622592442382323221620620419418916815139116110'

# Got / expected
# 992 98 983 979 961 949 946 942 923 922 920 898 892 890 874 871 860 854 821 821 817 795 792 780 773 764 757 740 730 719 711 70 705 703 690 685 66 660 647 646 639 635 634 634 625 613 609 584 557 5 538 520 503 495 490 481 480 471 451 420 397 39 345 344 3 333 331 315 315 313 307 306 302 288 281 262 259 244 238  232 23  216 206 204 194 189 168 15 139 116 110
# 992 98 983 979 961 949 946 942 923 922 920 898 892 890 874 871 860 854 821 821 817 795 792 780 773 764 757 740 730 719 711 70 705 703 690 685 66 660 647 646 639 635 634 634 625 613 609 584 557 5 538 520 503 495 490 481 480 471 451 420 397 39 345 344 3 333 331 315 315 313 307 306 302 288 281 262 259 244 238  23 232  216 206 204 194 189 168 15 139 116 110
# 992,98,983,979,961,949,946,942,923,922,920,898,892,890,874,871,860,854,821,821,817,795,792,780,773,764,757,740,730,719,711,70,705,703,690,685,66,660,647,646,639,635,634,634,625,613,609,584,557,5,538,520,503,495,490,481,480,471,451,420,397,39,345,344,3,333,331,315,315,313,307,306,302,288,281,262,259,244,238, 232,23, 216,206,204,194,189,168,15,139,116,110

